// Rules for Firebase Storage: Controls who can upload, download, and delete files.
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Default Security: By default, nobody can read or write to the storage bucket.
    // This is a "deny-all" approach. Access must be explicitly granted below.
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Rule for User Profile Pictures
    // Path: /profile-pictures/{userId}/{anyFileName}
    match /profile-pictures/{userId}/{fileName} {
      // Any authenticated user can read profile pictures (they are public).
      allow read: if request.auth != null;
      // Only the authenticated user whose UID matches {userId} can write (upload/update/delete) their own picture.
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rule for Professional Service Images
    // Path: /handyman-services/{handymanId}/{serviceId}/{anyFileName}
    match /handyman-services/{handymanId}/{fileName} {
       // Any user can read service images.
      allow read: if true;
      // Only the professional whose UID matches {handymanId} can write their own service images.
      allow write: if request.auth != null && request.auth.uid == handymanId;
    }

    // Rule for Supplier Product Images
    // Path: /supplier-products/{supplierId}/{productId}/{anyFileName}
    match /supplier-products/{supplierId}/{fileName} {
      // Any user can read product images.
      allow read: if true;
      // Only the supplier whose UID matches {supplierId} can write their own product images.
      allow write: if request.auth != null && request.auth.uid == supplierId;
    }
    
    // ===================================================================
    // NEW RULE: Rule for Images in Quotation Request Conversations
    // Path: /quotationRequests/{requestId}/messages/{anyFileName}
    // ===================================================================
    match /quotationRequests/{requestId}/messages/{fileName} {
        // To read or write an image, the user must be authenticated.
        // Then, we check the corresponding Firestore document for the quotation request
        // to verify if the user is authorized.
        allow read, write: if request.auth != null &&
                            isUserAuthorizedForRequest(requestId);
    }
  }
}

// Helper function to check authorization for a specific quotation request
function isUserAuthorizedForRequest(requestId) {
    let requestData = get(/databases/$(database)/documents/quotationRequests/$(requestId)).data;
    
    // Check if the user is the customer who created the request.
    let isOwner = request.auth.uid == requestData.userId;
    
    // Check if the user is the professional or supplier assigned to the request.
    let isAssigned = request.auth.uid == requestData.professionalId || request.auth.uid == requestData.handymanId;
    
    // Check if the user is an admin by looking up their profile in the 'users' collection.
    let isAdmin = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

    // Allow access if the user is the owner, the assigned professional/supplier, or an admin.
    return isOwner || isAssigned || isAdmin;
}
